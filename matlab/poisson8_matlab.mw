
@function [pot] = volfmm8(t,f,eps,opts)
%  This subroutine calls frank's boxcode to evaluate
%  the free space convolution against the laplace green's
%  function but using the new tree interface
%
%  input arguments:
%    - t: tree structure
%        t.nlev: int
%           number of levels in the tree, root level is 0
%        t.nboxes: int 
%           number of boxes in the tree
%        t.itree: int(ltree)
%           array containing tree structure
%        t.iptr: int(8)
%           iptr - integer(8)
%              pointer to various parts of the tree structure
%              iptr(1) - laddr
%              iptr(2) - ilevel
%              iptr(3) - iparent
%              iptr(4) - nchild
%              iptr(5) - ichild
%              iptr(6) - ncoll
%              iptr(7) - coll
%              iptr(8) - ltree
%        t.centers: double(2,nboxes)
%           location of center of boxes in tree structure
%        t.boxsize: double(nlevels+1)
%           boxsize of various levels strating from level0
%    - f: (64,nboxes)
%         right hand side: ordering of chebyshev nodes given by
%         do j=1,8
%           do l=1,8
%              xf(8*(l-1)+j) = x(j) + xshift
%              yf(8*(l-1)+j) = x(j) + yshift
%           enddo
%         enddo
%
%         where x(j) are scaled chebyshev nodes on the box
%    - opts: options structure (optional)
%         opts.ifnear: flag for determining whether to include list1
%           interactions or not, default value, ifnear = 1, 
%           which includes the near interaction
%
%           
%
%
    if(nargin == 3)
        opts = [];
    end
    nlev = t.nlev;
    itree = t.itree(:);
    ltree = length(itree);
    iptr = t.iptr;
    centers = t.centers;
    boxsize = t.boxsize;

    nboxes = t.nboxes;
    nlevp1 = nlev + 1;


    ifnear = 1;
    if(isfield(opts,'ifnear'))
       ifnear = opts.ifnear;
    end
    npbox = 64;
    nd = 1;
    iperiod = 0;
    norder = 8;
    timeinfo = zeros(6,1);


    # FORTRAN lbfmm2d(int[1] nd, double[1] eps, int[1] nboxes, int[1] nlev, int[1] ltree, int[ltree] itree, int[8] iptr, int[1] norder, int[1] npbox, double [npbox,nboxes] fvals,  double [2,nboxes] centers, double [nlevp1] boxsize, int[1] ifnear, inout double [npbox,nboxes] pot, inout double [6] timeinfo);

end

%
%
%
%
%
%


@function [pot] = volfmm8_legacy(t,f,eps,opts)
%  This subroutine calls frank's boxcode to evaluate
%  the free space convolution against the laplace green's
%  function
%
%  input arguments:
%    - t: tree structure
%        t.nlev: int
%           number of levels in the tree, root level is 0
%        t.nboxes: int 
%           number of boxes in the tree
%        t.levelbox: (nboxes)
%           levelbox(i) indicates the level of box i
%        t.iparentbox: (nboxes)
%           iparentbox(i) is the parent of box i
%        t.ichildbox: (4,nboxes)
%           ichildbox(1:4,i) are the children of box i,
%           child 1 is top left corner, child 2 is top right corner,
%           child 3 is bottom right corner, child 4 is bottom left corner
%        t.icolbox: (nboxes)
%           column number of box i, assuming a uniform grid of boxes 
%           at the level of box i (1 indexed)
%        t.irowbox: (nboxes)
%           row number of box i, assuming a uniform grid of boxes 
%           at the level of box i (1 indexed)
%        t.nblevel: (nlev+1)
%           number of boxes at each level
%        t.iboxlev: (nboxes)
%           possible permutation of boxes at a fixed level
%        t.istartlev (nlev+1)
%           location in the sorted boxes array where boxes at level
%           i begin
%    - f: (64,nboxes)
%         right hand side: ordering of chebyshev nodes given by
%         do j=1,8
%           do l=1,8
%              xf(8*(l-1)+j) = x(j) + xshift
%              yf(8*(l-1)+j) = x(j) + yshift
%           enddo
%         enddo
%
%         where x(j) are scaled chebyshev nodes on the box
%    - opts: options structure (optional)
%         opts.ifnear: flag for determining whether to include list1
%           interactions or not, default value, ifnear = 1, 
%           which includes the near interaction
%
%           
%
%
    if(nargin == 3)
        opts = [];
    end
    iprec = 1;
    if(eps >= 0.5e-3)
        iprec = 1;
    else if(eps >= 0.5e-6)
        iprec = 2;
    else if(eps >= 0.5e-9)
        iprec = 3;
    else
        iprec = 4;
    end
    nlev = t.nlev;
    levelbox = t.levelbox;
    iparentbox = t.iparentbox;
    ichildbox = t.ichildbox;
    icolbox = t.icolbox;
    irowbox = t.irowbox;
    nboxes = t.nboxes;
    nblevel = t.nblevel;
    iboxlev = t.iboxlev;
    istartlev = t.istartlev;
    nlevp1 = nlev + 1;
    ifnear = 1;
    if(isfield(opts,'ifnear'))
       ifnear = opts.ifnear;
    end
    nd = 64;

    # FORTRAN fmmstart8_wrap(int[1] nlev, int[nboxes] levelbox, int[nboxes] iparentbox, int[4,nboxes] ichildbox, int[nboxes] icolbox, int[nboxes] irowbox, int[1] nboxes, int[nlevp1] nblevel, int[nboxes] iboxlev, int[nlevp1] istartlev, double[nd,nboxes] f, int[1] ifnear, inout double[nd,nboxes] pot, int[1] iprec);

end
